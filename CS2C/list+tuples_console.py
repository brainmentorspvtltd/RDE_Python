Python 3.9.0 (tags/v3.9.0:9cf6752, Oct  5 2020, 15:34:40) [MSC v.1927 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license()" for more information.
>>> x = []
>>> x = list()
>>> x = [5,4,6,7,8,4]
>>> x = [5,4,6,7,8,4,'hi',10.55]
>>> x[0]
5
>>> x[0:5]
[5, 4, 6, 7, 8]
>>> x[::-1]
[10.55, 'hi', 4, 8, 7, 6, 4, 5]
>>> dir(x)
['__add__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']
>>> x = []
>>> x = list()
>>> x.append(12)
>>> x
[12]
>>> x.append(16)
>>> x
[12, 16]
>>> x.append(1)
>>> x.append(6)
>>> x.append(68)
>>> x.append(8)
>>> x
[12, 16, 1, 6, 68, 8]
>>> x.pop()
8
>>> x
[12, 16, 1, 6, 68]
>>> x.append(56,3,4,6,8,8)
Traceback (most recent call last):
  File "<pyshell#21>", line 1, in <module>
    x.append(56,3,4,6,8,8)
TypeError: list.append() takes exactly one argument (6 given)
>>> x.append([56,3,4,6,8,8])
>>> x
[12, 16, 1, 6, 68, [56, 3, 4, 6, 8, 8]]
>>> x.pop()
[56, 3, 4, 6, 8, 8]
>>> x
[12, 16, 1, 6, 68]
>>> x + [56, 3, 4, 6, 8, 8]
[12, 16, 1, 6, 68, 56, 3, 4, 6, 8, 8]
>>> x
[12, 16, 1, 6, 68]
>>> x.extend([56, 3, 4, 6, 8, 8])
>>> x
[12, 16, 1, 6, 68, 56, 3, 4, 6, 8, 8]
>>> x * 3
[12, 16, 1, 6, 68, 56, 3, 4, 6, 8, 8, 12, 16, 1, 6, 68, 56, 3, 4, 6, 8, 8, 12, 16, 1, 6, 68, 56, 3, 4, 6, 8, 8]
>>> x / 5
Traceback (most recent call last):
  File "<pyshell#31>", line 1, in <module>
    x / 5
TypeError: unsupported operand type(s) for /: 'list' and 'int'
>>> x.pop()
8
>>> x
[12, 16, 1, 6, 68, 56, 3, 4, 6, 8]
>>> x.pop(2)
1
>>> x.insert(4,100)
>>> x
[12, 16, 6, 68, 100, 56, 3, 4, 6, 8]
>>> x.remove(0)
Traceback (most recent call last):
  File "<pyshell#37>", line 1, in <module>
    x.remove(0)
ValueError: list.remove(x): x not in list
>>> x.remove(6)
>>> x
[12, 16, 68, 100, 56, 3, 4, 6, 8]
>>> x[0] = 120
>>> x
[120, 16, 68, 100, 56, 3, 4, 6, 8]
>>> x[0:3] = 5
Traceback (most recent call last):
  File "<pyshell#42>", line 1, in <module>
    x[0:3] = 5
TypeError: can only assign an iterable
>>> x[0:3] = [2,3]
>>> x
[2, 3, 100, 56, 3, 4, 6, 8]
>>> x
[2, 3, 100, 56, 3, 4, 6, 8]
>>> x[0:4]
[2, 3, 100, 56]
>>> x[0:4] = [1,2,4,5,6,8,8,4]
>>> x
[1, 2, 4, 5, 6, 8, 8, 4, 3, 4, 6, 8]
>>> x.count(8)
3
>>> x.index(5)
3
>>> x.index(3)
8
>>> len(x)
12
>>> sorted(x)
[1, 2, 3, 4, 4, 4, 5, 6, 6, 8, 8, 8]
>>> sorted(x, reverse=True)
[8, 8, 8, 6, 6, 5, 4, 4, 4, 3, 2, 1]
>>> x
[1, 2, 4, 5, 6, 8, 8, 4, 3, 4, 6, 8]
>>> x.sort()
>>> x
[1, 2, 3, 4, 4, 4, 5, 6, 6, 8, 8, 8]
>>> 10 in x
False
>>> 5 in x
True
>>> x
[1, 2, 3, 4, 4, 4, 5, 6, 6, 8, 8, 8]
>>> y = x
>>> x
[1, 2, 3, 4, 4, 4, 5, 6, 6, 8, 8, 8]
>>> y
[1, 2, 3, 4, 4, 4, 5, 6, 6, 8, 8, 8]
>>> x == y
True
>>> x is y
True
>>> z = x.copy()
>>> x
[1, 2, 3, 4, 4, 4, 5, 6, 6, 8, 8, 8]
>>> y
[1, 2, 3, 4, 4, 4, 5, 6, 6, 8, 8, 8]
>>> z
[1, 2, 3, 4, 4, 4, 5, 6, 6, 8, 8, 8]
>>> x == y == z
True
>>> x is y
True
>>> x is z
False
>>> x[0] = 100
>>> x
[100, 2, 3, 4, 4, 4, 5, 6, 6, 8, 8, 8]
>>> y
[100, 2, 3, 4, 4, 4, 5, 6, 6, 8, 8, 8]
>>> z
[1, 2, 3, 4, 4, 4, 5, 6, 6, 8, 8, 8]
>>> x.append([5,4,5,7])
>>> x
[100, 2, 3, 4, 4, 4, 5, 6, 6, 8, 8, 8, [5, 4, 5, 7]]
>>> z = x.copy()
>>> y = x
>>> x == y == z
True
>>> x is y
True
>>> x is z
False
>>> x[0]
100
>>> x[0] = 500
>>> x
[500, 2, 3, 4, 4, 4, 5, 6, 6, 8, 8, 8, [5, 4, 5, 7]]
>>> y
[500, 2, 3, 4, 4, 4, 5, 6, 6, 8, 8, 8, [5, 4, 5, 7]]
>>> z
[100, 2, 3, 4, 4, 4, 5, 6, 6, 8, 8, 8, [5, 4, 5, 7]]
>>> x[-1][0]
5
>>> x[-1][0] = 50
>>> x
[500, 2, 3, 4, 4, 4, 5, 6, 6, 8, 8, 8, [50, 4, 5, 7]]
>>> y
[500, 2, 3, 4, 4, 4, 5, 6, 6, 8, 8, 8, [50, 4, 5, 7]]
>>> z
[100, 2, 3, 4, 4, 4, 5, 6, 6, 8, 8, 8, [50, 4, 5, 7]]
>>> import copy
>>> z1 = copy.deepcopy(x)
>>> x[-1][0]
50
>>> x[-1][0] = 500
>>> x
[500, 2, 3, 4, 4, 4, 5, 6, 6, 8, 8, 8, [500, 4, 5, 7]]
>>> y
[500, 2, 3, 4, 4, 4, 5, 6, 6, 8, 8, 8, [500, 4, 5, 7]]
>>> z
[100, 2, 3, 4, 4, 4, 5, 6, 6, 8, 8, 8, [500, 4, 5, 7]]
>>> z1
[500, 2, 3, 4, 4, 4, 5, 6, 6, 8, 8, 8, [50, 4, 5, 7]]
>>> x = []
>>> for i in range(1,101):
	x.append(i)

	
>>> x
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]
>>> x = [for i in range(1,101)]
SyntaxError: invalid syntax
>>> x = [i for i in range(1,101)]
>>> x
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]
>>> x = [i for i in range(1,101) if i % 2 == 0]
>>> x
[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]
>>> x = [[i,j,k] for i in range(5) for j in range(5) for k in range(5)]
>>> x
[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 1, 0], [0, 1, 1], [0, 1, 2], [0, 1, 3], [0, 1, 4], [0, 2, 0], [0, 2, 1], [0, 2, 2], [0, 2, 3], [0, 2, 4], [0, 3, 0], [0, 3, 1], [0, 3, 2], [0, 3, 3], [0, 3, 4], [0, 4, 0], [0, 4, 1], [0, 4, 2], [0, 4, 3], [0, 4, 4], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 0, 3], [1, 0, 4], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 1, 3], [1, 1, 4], [1, 2, 0], [1, 2, 1], [1, 2, 2], [1, 2, 3], [1, 2, 4], [1, 3, 0], [1, 3, 1], [1, 3, 2], [1, 3, 3], [1, 3, 4], [1, 4, 0], [1, 4, 1], [1, 4, 2], [1, 4, 3], [1, 4, 4], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 0, 3], [2, 0, 4], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 1, 3], [2, 1, 4], [2, 2, 0], [2, 2, 1], [2, 2, 2], [2, 2, 3], [2, 2, 4], [2, 3, 0], [2, 3, 1], [2, 3, 2], [2, 3, 3], [2, 3, 4], [2, 4, 0], [2, 4, 1], [2, 4, 2], [2, 4, 3], [2, 4, 4], [3, 0, 0], [3, 0, 1], [3, 0, 2], [3, 0, 3], [3, 0, 4], [3, 1, 0], [3, 1, 1], [3, 1, 2], [3, 1, 3], [3, 1, 4], [3, 2, 0], [3, 2, 1], [3, 2, 2], [3, 2, 3], [3, 2, 4], [3, 3, 0], [3, 3, 1], [3, 3, 2], [3, 3, 3], [3, 3, 4], [3, 4, 0], [3, 4, 1], [3, 4, 2], [3, 4, 3], [3, 4, 4], [4, 0, 0], [4, 0, 1], [4, 0, 2], [4, 0, 3], [4, 0, 4], [4, 1, 0], [4, 1, 1], [4, 1, 2], [4, 1, 3], [4, 1, 4], [4, 2, 0], [4, 2, 1], [4, 2, 2], [4, 2, 3], [4, 2, 4], [4, 3, 0], [4, 3, 1], [4, 3, 2], [4, 3, 3], [4, 3, 4], [4, 4, 0], [4, 4, 1], [4, 4, 2], [4, 4, 3], [4, 4, 4]]
>>> x = [[i,j] for i in range(5) for j in range(5)]
>>> x
[[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]
>>> x = [[i,j] for i in range(5) for j in range(5) if i != j]
>>> x
[[0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3]]
>>> x = [4,3,5,6,8,44,4,6]
>>> for i in x:
	print(i)

	
4
3
5
6
8
44
4
6
>>> for i in x:
	print(i, end=',')

	
4,3,5,6,8,44,4,6,
>>> for i in range(len(x)):
	print(i, x[i])

	
0 4
1 3
2 5
3 6
4 8
5 44
6 4
7 6
>>> count = 0
>>> for i in range(len(x)):
	count += x[i]

	
>>> count
80
>>> 
>>> 
>>> 
>>> 
>>> # tuples
>>> x = 10,
>>> type(x)
<class 'tuple'>
>>> x = 10,3,4,6,7,3
>>> x = (10,3,4,6,7,3)
>>> x[0]
10
>>> x[0:5]
(10, 3, 4, 6, 7)
>>> x[0] = 100
Traceback (most recent call last):
  File "<pyshell#142>", line 1, in <module>
    x[0] = 100
TypeError: 'tuple' object does not support item assignment
>>> del x[0]
Traceback (most recent call last):
  File "<pyshell#143>", line 1, in <module>
    del x[0]
TypeError: 'tuple' object doesn't support item deletion
>>> x.count(4)
1
>>> x.index(4)
2
>>> x
(10, 3, 4, 6, 7, 3)
>>> #packing & unpacking
>>> data = 'Ram', 40, 48000, 'IT'
>>> name, age, sal, dept = data
>>> name
'Ram'
>>> age
40
>>> sal
48000
>>> dept
'IT'
>>> name, age, sal = data
Traceback (most recent call last):
  File "<pyshell#154>", line 1, in <module>
    name, age, sal = data
ValueError: too many values to unpack (expected 3)
>>> name, age, *sal = data
>>> name
'Ram'
>>> age
40
>>> sal
[48000, 'IT']
>>> 